// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Project {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId 
    name            Json 
    description     Json 
    longDescription Json 
    imageUrl        String 
    livePreviewUrl  String 
    liveUrl         String 
    githubUrl       String 
    technologies    String[] 
    tags            String[] 
}

model User {
    id            String    @id @map("_id")
    name          String
    email         String
    emailVerified Boolean
    image         String?
    createdAt     DateTime
    updatedAt     DateTime
    sessions      Session[]
    accounts      Account[]
    Like          Like[]

    @@unique([email])
    @@map("user")
}

model Session {
    id        String   @id @map("_id")
    expiresAt DateTime
    token     String
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id @map("_id")
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String    @id @map("_id")
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

model Comment {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    image     String?
    content   String
    createdAt DateTime   @default(now())
    postSlug  String
    ipAddress String
    responses Response[]
}

model Response {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    image     String?
    content   String
    createdAt DateTime @default(now())
    ipAddress String
    comment   Comment  @relation(fields: [commentId], references: [id])
    commentId String   @db.ObjectId
}

model Like {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    postSlug  String
    createdAt DateTime @default(now())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([postSlug])
}
